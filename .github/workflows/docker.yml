name: Docker

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

  schedule:
    - cron: '0 0 1 * *' # At 00:00 on day-of-month 1.

  workflow_dispatch:

concurrency:
  group: Docker ${{ github.ref }}
  cancel-in-progress: true

env:
  registry: ghcr.io

jobs:
  docker-run:
    runs-on: ubuntu-latest
    name: Docker build developpment

    strategy:
      fail-fast: false

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.registry }}/${{ github.repository }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.registry }}
          username: ${{ secrets.CR_USER }}
          password: ${{ secrets.CR_PAT }}

      - name: Get version
        id: version
        run: |
          echo "release=$(git describe --abbrev=0 --tags --exact-match $GITHUB_SHA 2>/dev/null || git log --pretty="%h" -n1 $GITHUB_SHA)" >> $GITHUB_OUTPUT

    # Build docker
      - name: Docker build
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          cache-from: type=registry,ref=${{ env.registry }}/${{ github.repository }}:main
          labels: ${{ steps.docker_meta.outputs.labels }}
          file: Dockerfile
          context: .
          build-args:
            SENTRY_RELEASE=${{ steps.version.outputs.release }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}


  deploy:
    runs-on: ubuntu-latest
    name: Deploy on staging
    needs: docker-run
    if: github.event_name != 'pull_request'

    environment: staging

    steps:
      - name: Post request
        run: |
          curl -sSL -u ":$TOKEN" -X POST -H "Content-type: application/json" "$URL" -d "$PAYLOAD"
        env:
          URL: ${{ secrets.URL }}
          PAYLOAD: ${{ secrets.PAYLOAD }}
          TOKEN: ${{ secrets.TOKEN }}
